{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sitrack\\\\Desktop\\\\Proyecto final\\\\PaginaDEPruebas\\\\pagina_de_pruebas\\\\src\\\\components\\\\containers\\\\dashboard.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useTheme } from '@mui/material/styles';\nimport { Grid, Container, Typography, Button } from '@mui/material';\nimport Dashboard from '../../app/Appdashboard';\nimport Page from '../pures/Page';\nimport { getDateFromApi } from '../../Services/axiosService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ShowData(_ref) {\n  _s();\n\n  let {\n    refresh\n  } = _ref;\n  var timer;\n  const [date, setDate] = useState([]);\n  const [meditions, setMeditions] = useState([]);\n  useEffect(() => {\n    timer = setInterval(obtainDate, 10000);\n    return () => clearInterval(timer);\n  });\n\n  const obtainDate = () => {\n    getDateFromApi().then(response => {\n      if (response.status === 200) {\n        //Si la respuesta esta ok, guardo la fecha en la variable date. \n        const tempDate = [...date];\n        const tempMeditions = []; //tempDate.push(response.data.toString());\n        // tempMeditions.push(value.toString());\n        // setMeditions(tempMeditions);\n        // setDate(tempDate);\n\n        let tempResponse = response.data.medition[0].medition;\n        const stringResponse = tempResponse.toString(); // tempResponse.forEach((element, index) => {\n        //     tempMeditions.push(element.medition);\n        //     setMeditions(tempMeditions);\n        // });\n\n        var jsonTexto = '{\"color\":\"blanco\",\"km\":100000,\"esNuevo\":false,\"rueda\":{\"marca\":\"desconocida\",\"estado\":\"malo\"}}';\n        console.log(stringResponse);\n        console.log(tempResponse);\n      }\n    }).catch(error => alert(`An error has ocurred ${error}`));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Page, {\n    title: \"Dashboard\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"x1\",\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        sx: {\n          mb: 5\n        },\n        children: \"Mediciones\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        lg: 8,\n        children: /*#__PURE__*/_jsxDEV(Dashboard, {\n          title: \"Tension bateria\",\n          subheader: \"Panel solar 500mA\",\n          chartLabels: date,\n          chartData: [// {\n          //     name: 'Team A',\n          //     type: 'column',\n          //     fill: 'solid',\n          //     data: [23, 11, 22, 27, 13, 22, 37, 21, 44, 22, 30],\n          // },\n          {\n            name: 'Team B',\n            type: 'area',\n            fill: 'gradient',\n            data: meditions\n          }]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        lg: 4,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: obtainDate,\n          variant: \"contained\",\n          children: \"Press\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ShowData, \"8up8uaCei6nZbTsYLSHjY0RV+tA=\");\n\n_c = ShowData;\n\nvar _c;\n\n$RefreshReg$(_c, \"ShowData\");","map":{"version":3,"names":["React","useState","useEffect","useTheme","Grid","Container","Typography","Button","Dashboard","Page","getDateFromApi","ShowData","refresh","timer","date","setDate","meditions","setMeditions","setInterval","obtainDate","clearInterval","then","response","status","tempDate","tempMeditions","tempResponse","data","medition","stringResponse","toString","jsonTexto","console","log","catch","error","alert","mb","name","type","fill"],"sources":["C:/Users/Sitrack/Desktop/Proyecto final/PaginaDEPruebas/pagina_de_pruebas/src/components/containers/dashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Grid, Container, Typography, Button } from '@mui/material';\r\nimport Dashboard from '../../app/Appdashboard'\r\nimport Page from '../pures/Page';\r\nimport { getDateFromApi } from '../../Services/axiosService';\r\n\r\n\r\nexport default function ShowData({ refresh }) {\r\n    var timer;\r\n    const [date, setDate] = useState([]);\r\n    const [meditions, setMeditions] = useState([]);\r\n\r\n    useEffect(() => {\r\n        timer = setInterval(obtainDate, 10000);\r\n        return () => clearInterval(timer);\r\n    });\r\n\r\n\r\n    const obtainDate = () => {\r\n        getDateFromApi()\r\n            .then((response) => {\r\n                if (response.status === 200) {//Si la respuesta esta ok, guardo la fecha en la variable date. \r\n\r\n                    const tempDate = [...date];\r\n                    const tempMeditions = [];\r\n\r\n                    //tempDate.push(response.data.toString());\r\n                    // tempMeditions.push(value.toString());\r\n                    // setMeditions(tempMeditions);\r\n                    // setDate(tempDate);\r\n                    let tempResponse = response.data.medition[0].medition;\r\n                    const stringResponse = tempResponse.toString();\r\n                    // tempResponse.forEach((element, index) => {\r\n                    //     tempMeditions.push(element.medition);\r\n                    //     setMeditions(tempMeditions);\r\n                    // });\r\n                    var jsonTexto = '{\"color\":\"blanco\",\"km\":100000,\"esNuevo\":false,\"rueda\":{\"marca\":\"desconocida\",\"estado\":\"malo\"}}';\r\n                    console.log(stringResponse);\r\n                    console.log(tempResponse);\r\n                }\r\n            })\r\n            .catch((error) => alert(`An error has ocurred ${error}`))\r\n    }\r\n\r\n    return (\r\n\r\n        <Page title='Dashboard'>\r\n            <Container maxWidth='x1'>\r\n                <Typography variant=\"h4\" sx={{ mb: 5 }}>\r\n                    Mediciones\r\n                </Typography>\r\n                <Grid item xs={12} md={6} lg={8}>\r\n                    <Dashboard\r\n                        title=\"Tension bateria\"\r\n                        subheader=\"Panel solar 500mA\"\r\n                        chartLabels={date}\r\n                        chartData={[\r\n                            // {\r\n                            //     name: 'Team A',\r\n                            //     type: 'column',\r\n                            //     fill: 'solid',\r\n                            //     data: [23, 11, 22, 27, 13, 22, 37, 21, 44, 22, 30],\r\n                            // },\r\n                            {\r\n                                name: 'Team B',\r\n                                type: 'area',\r\n                                fill: 'gradient',\r\n                                data: meditions\r\n                            },\r\n\r\n                        ]}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} md={6} lg={4}>\r\n                    <Button onClick={obtainDate} variant=\"contained\">Press</Button>\r\n                </Grid>\r\n            </Container>\r\n        </Page>\r\n\r\n    )\r\n}\r\n\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,IAAT,EAAeC,SAAf,EAA0BC,UAA1B,EAAsCC,MAAtC,QAAoD,eAApD;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,SAASC,cAAT,QAA+B,6BAA/B;;AAGA,eAAe,SAASC,QAAT,OAA+B;EAAA;;EAAA,IAAb;IAAEC;EAAF,CAAa;EAC1C,IAAIC,KAAJ;EACA,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC,EAAD,CAAhC;EACA,MAAM,CAACe,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,CAAC,EAAD,CAA1C;EAEAC,SAAS,CAAC,MAAM;IACZW,KAAK,GAAGK,WAAW,CAACC,UAAD,EAAa,KAAb,CAAnB;IACA,OAAO,MAAMC,aAAa,CAACP,KAAD,CAA1B;EACH,CAHQ,CAAT;;EAMA,MAAMM,UAAU,GAAG,MAAM;IACrBT,cAAc,GACTW,IADL,CACWC,QAAD,IAAc;MAChB,IAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;QAAC;QAE1B,MAAMC,QAAQ,GAAG,CAAC,GAAGV,IAAJ,CAAjB;QACA,MAAMW,aAAa,GAAG,EAAtB,CAHyB,CAKzB;QACA;QACA;QACA;;QACA,IAAIC,YAAY,GAAGJ,QAAQ,CAACK,IAAT,CAAcC,QAAd,CAAuB,CAAvB,EAA0BA,QAA7C;QACA,MAAMC,cAAc,GAAGH,YAAY,CAACI,QAAb,EAAvB,CAVyB,CAWzB;QACA;QACA;QACA;;QACA,IAAIC,SAAS,GAAG,gGAAhB;QACAC,OAAO,CAACC,GAAR,CAAYJ,cAAZ;QACAG,OAAO,CAACC,GAAR,CAAYP,YAAZ;MACH;IACJ,CArBL,EAsBKQ,KAtBL,CAsBYC,KAAD,IAAWC,KAAK,CAAE,wBAAuBD,KAAM,EAA/B,CAtB3B;EAuBH,CAxBD;;EA0BA,oBAEI,QAAC,IAAD;IAAM,KAAK,EAAC,WAAZ;IAAA,uBACI,QAAC,SAAD;MAAW,QAAQ,EAAC,IAApB;MAAA,wBACI,QAAC,UAAD;QAAY,OAAO,EAAC,IAApB;QAAyB,EAAE,EAAE;UAAEE,EAAE,EAAE;QAAN,CAA7B;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,eAII,QAAC,IAAD;QAAM,IAAI,MAAV;QAAW,EAAE,EAAE,EAAf;QAAmB,EAAE,EAAE,CAAvB;QAA0B,EAAE,EAAE,CAA9B;QAAA,uBACI,QAAC,SAAD;UACI,KAAK,EAAC,iBADV;UAEI,SAAS,EAAC,mBAFd;UAGI,WAAW,EAAEvB,IAHjB;UAII,SAAS,EAAE,CACP;UACA;UACA;UACA;UACA;UACA;UACA;YACIwB,IAAI,EAAE,QADV;YAEIC,IAAI,EAAE,MAFV;YAGIC,IAAI,EAAE,UAHV;YAIIb,IAAI,EAAEX;UAJV,CAPO;QAJf;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA,QAJJ,eA0BI,QAAC,IAAD;QAAM,IAAI,MAAV;QAAW,EAAE,EAAE,EAAf;QAAmB,EAAE,EAAE,CAAvB;QAA0B,EAAE,EAAE,CAA9B;QAAA,uBACI,QAAC,MAAD;UAAQ,OAAO,EAAEG,UAAjB;UAA6B,OAAO,EAAC,WAArC;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA,QA1BJ;IAAA;MAAA;MAAA;MAAA;IAAA;EADJ;IAAA;IAAA;IAAA;EAAA,QAFJ;AAoCH;;GAzEuBR,Q;;KAAAA,Q"},"metadata":{},"sourceType":"module"}